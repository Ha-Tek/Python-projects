# pymoo: Multi-objective Optimization in Python ( https://pymoo.org/ )
# NSGA-II in PYMOO
# Source: Udemy -- Solve optimization problems with CPLEX, Gurobi, Pyomo... using linear programming, nonlinear, evolutionary algorithms

# Exercise 1: Solve the following bi-objective functions using NSGA-II.
#min f1(x)=100(x1^2+x2^2)
#min f1(x)=100(x1-1)Ë†2+x2^2
#s.t. g1(x)=2*(x1-0.1) * (x1-0.9) / 0.18 <= 0
     #g2(x) = - 20*(x1-0.4) * (x1-0.6) / 4.8 <= 0
      #-2<=x1<=2
      #-2<=x2<=2
      #x is in the set of real numbers

import numpy as np
from pymoo.core.problem import ElementwiseProblem
from pymoo.termination import get_termination
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.operators.crossover.sbx import SBX
from pymoo.operators.mutation.pm import PM
from pymoo.operators.sampling.rnd import FloatRandomSampling
from pymoo.optimize import minimize
 
#definition of the problem
class MyProblem(ElementwiseProblem):
     
    def __init__(self):
        super().__init__(n_var=2,
                         n_obj=2,
                         n_constr=2,
                         xl=np.array([-2,-2]),
                         xu=np.array([2,2]))
 
    def _evaluate(self, x, out, *args, **kwargs):
        f1 = 100 * (x[0]**2 + x[1]**2)
        f2 = (x[0]-1)**2 + x[1]**2
 
        g1 = 2*(x[0]-0.1) * (x[0]-0.9) / 0.18
        g2 = - 20*(x[0]-0.4) * (x[0]-0.6) / 4.8
 
        out["F"] = [f1, f2]
        out["G"] = [g1, g2]
 
problem = MyProblem()
 
#parameters
algorithm = NSGA2(
    pop_size=40,
    n_offsprings=10,
    sampling=FloatRandomSampling(),
    crossover=SBX(prob=0.9, eta=15),
    mutation=PM(eta=20),
    eliminate_duplicates=True
)
 
#termination criteria
termination = get_termination("n_gen", 40)
 
#solve problem
res = minimize(problem,
               algorithm,
               termination,
               seed=1,
               save_history=True,
               verbose=True)
 
#get solutions
X = res.X
F = res.F
print(X)
print(F)

