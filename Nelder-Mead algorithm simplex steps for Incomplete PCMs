#By Hailemariam Abebe Tekile
#University of Trento
# 18 April 2023

# Incomplete PCM with two unknown variables:
#A = [[1, x1, 1/3, x2], [1/x1, 1, 1/9, 1/3], [3, 9, 1, 3], [1/x2, 3, 1/3, 1]];

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
from scipy.optimize import minimize
#from matplotlib.animation import FuncAnimation, PillowWriter
from scipy.linalg import eig

# Define function to minimize
def fun(x, beta=1.0):
    x1, x2 = x[0], x[1]
    #x1, x2 = x #alternative
    A = -beta*np.array([
        [1, x1, 1/3, x2],
        [1/x1, 1, 1/9, 1/3],
        [3, 9, 1, 3],
        [1/x2, 3, 1/3, 1]])
    lambdaMax = max(np.linalg.eigvals(A))
    return lambdaMax

#ALTERNATIVE definition for lambdaMax
## Define function to minimize
#def fun(x, beta=1.0):
#    A = np.array([
#    [1, 0, 1/3, 1],
#    [0, 1, 1/9, 0],
#    [3, 9, 1, 3],
#    [1, 0, 1/3, 1]])
#    n = A.shape[0]
#    numberOfMissingEntries = len(x)
#    xPosition = np.zeros((numberOfMissingEntries, 2), dtype=int)
#    index = 0
#    for j in range(1, n): # for i < j
#        for i in range(j):
#            if A[i,j] == 0:
#                xPosition[index, 0] = i # position of x in the ith row
#                xPosition[index, 1] = j # position of x in the jth column
#                index += 1 
#    for r in range(numberOfMissingEntries):
#        A[xPosition[r, 0], xPosition[r, 1]] = x[r] 
#        A[xPosition[r, 1], xPosition[r, 0]] = 1/x[r] 
#    lambdaMax = max(eig(A)[0])
#    #lambdaMax = max(np.linalg.eigvals(A))
#    return lambdaMax



## Find the maximum eigenvalue - optional
#x0 = [3, 1/3]  # initial value of x
#lambdaMax = fun(x0)
#print("Maximum eigenvalue: ", lambdaMax)

plt.rcParams["font.size"] = 10 #sets the default font size for text in plots to 10 points. This means that any text displayed in a plot, such as axis labels, titles, legends, etc., will be displayed with a font size of 10 points, unless explicitly overridden.
plt.rcParams["mathtext.fontset"] = "cm" #sets the default font for rendering math expressions in plots to the "Computer Modern" font, which is the default font used in LaTeX documents. This ensures that math expressions in plots are displayed using the same font as in LaTeX documents, which can be useful for consistency and clarity.

# Minimization
def nelder_mead_step(fun, verts, alpha=1, gamma=2, rho=0.5,
                     sigma=0.5, beta=1.0):

    nverts, _ = verts.shape
    f = np.apply_along_axis(fun, 1, verts, beta=beta)
    # 1. Order
    order = np.argsort(f)
    verts = verts[order, :]
    f = f[order]
    # 2. Calculate xo, the centroid"
    xo = verts[:-1, :].mean(axis=0)
    # 3. Reflection
    xr = xo + alpha*(xo - verts[-1, :])
    fr = fun(xr, beta)
    if f[0]<=fr and fr<f[-2]:
        new_verts = np.vstack((verts[:-1, :], xr))
    # 4. Expansion
    elif fr<f[0]:
        xe = xo + gamma*(xr - xo)
        fe = fun(xe, beta)
        if fe < fr:
            new_verts = np.vstack((verts[:-1, :], xe))
        else:
            new_verts = np.vstack((verts[:-1, :], xe))
    # 5. Contraction
    else:
        xc = xo + rho*(verts[-1, :] - xo)
        fc = fun(xc, beta)
        if fc < f[-1]:
            new_verts = np.vstack((verts[:-1, :], xc))
    # 6. Shrink
        else:
            new_verts = np.zeros_like(verts)
            new_verts[0, :] = verts[0, :]
            for k in range(1, nverts):
                new_verts[k, :] = sigma*(verts[k,:] - verts[0,:])
 
    return new_verts

# Define the data generation function for the animation
def data_gen(num):
    # Clear the current axis
    #plt.gca().cla()
    # Define the initial triangle vertices (right triangle), e.g.,   x0 = np.array([1, 4]),x1 = np.array([3, 4]),x2 = np.array([3, 2])
    x0 = np.array([1, 8])
    x1 = np.array([3, 6])
    x2 = np.array([3, 8])
    verts = np.vstack((x0, x1, x2))
    beta = 1.0
    for cont in range(num):
        verts = nelder_mead_step(fun, verts, beta=beta)
        beta /= 2
    # Plot the triangle and the contour lines
    #plt.cla()
    poly = plt.Polygon(verts, facecolor="none", edgecolor="r",
                       linewidth=2, zorder=4)
    plt.gca().add_patch(poly)
    # Wait for 0.1 seconds to show the simplex region
    #    plt.pause(0.1)
    #ax = plt.axes(xlim=(1/9, 9), ylim=(1/9, 9))
    X1, X2 = np.meshgrid(np.linspace(1/9, 9, 50), np.linspace(1/9, 9, 50))
    Z = np.zeros((50, 50))#number of iterations
    for ii in range(50):
        for jj in range(50):
            x = np.array([X1[ii,jj], X2[ii,jj]])
            Z[ii,jj] = fun(x)
            #print(i, j, x, z[i,j])  # added print statement
    #levels = np.linspace(1/9, 9, 250)
    #plt.contour(X1, X2, Z, levels, cmap="seismic", linewidths=1)
    plt.contour(X1, X2, Z, levels=75, linewidths=0.5)
    plt.axis("image")
    plt.xlabel(r"$x_1$", fontsize=18)
    plt.ylabel(r"$x_2$", fontsize=18)
    #plt.title("Contract Inside")

# Create the animation and save it as a GIF file
fig = plt.figure(figsize=(5, 5))
ani = animation.FuncAnimation(fig, data_gen, frames=20, repeat=True)
ani.save("Nelder-Mead20.gif", writer='pillow', fps=2, dpi=300)
plt.show()
